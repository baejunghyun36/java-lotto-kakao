package controller;

import model.*;
import view.InputView;
import view.OutputView;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.util.List;
import static constant.LottoConstants.*;

public class LottoController {

    private static LottoMachine lottoMachine;
    private static WinnigNumbers winningNumbers;
    private static List<Lotto> lottos;
    private static Statistics statistics;
    private static int paymentAmount;

    public LottoController() {
        lottoMachine = new LottoMachineImpl();
        lottos = new ArrayList<>();
    }

    public void run (){
        try {
            settingAutoGeneratedLotto();
            settingWinningNumbers();
            lottoStart();
        } catch (Exception e) {
            throw new IllegalArgumentException();
        }
    }

    private void settingAutoGeneratedLotto(){
        paymentAmount = InputView.readPaymentAmount();
        OutputView.printPaymentAmount(calculateLottoCount());
        generateLotto();
        OutputView.printLottosNumbers(lottos);
    }

    private void settingWinningNumbers() {
        String winningNumbersUserInput = InputView.readWinningNumbers();
        Bonus bonus = new Bonus(InputView.readBonusNumber());
        winningNumbers = createWinningNumbers(winningNumbersUserInput, bonus);
    }

    private void lottoStart() {
        statistics = new Statistics(calculateLottoCount() * LOTTO_PRICE);
        matchReward();
        OutputView.printResultList(statistics);
    }

    private int calculateLottoCount(){
        return paymentAmount / LOTTO_PRICE;
    }

    public WinnigNumbers createWinningNumbers(String input, Bonus bonus) {
        String[] number = input.replaceAll(" ", "").split(",");
        return new WinnigNumbers(new Numbers(Arrays.stream(number).map(Integer::parseInt).collect(Collectors.toList()), true), bonus);
    }

    private void generateLotto() {
        int count = calculateLottoCount();
        for (int i = 1; i <= count; i++) {
            lottos.add(new Lotto(lottoMachine.extractLottoNumbers()));
        }
    }

    public void matchReward() {
        for (Lotto lotto : lottos) {
            statistics.updateResult(matchNumbers(lotto), hasBonusNumber(lotto));
        }
    }

    private int matchNumbers(Lotto lotto){
        return winningNumbers.matchNumbers(lotto.getNumbers());
    }

    private boolean hasBonusNumber(Lotto lotto) {
        return winningNumbers.hasBonusNumber(lotto.getNumbers());
    }
}
